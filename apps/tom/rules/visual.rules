# @topic objects/Visual::TropicalOrientedMatroid
# @category Visualization
# Visualisation of tropical oriented matroids
# @relates TropicalOrientedMatroid
package Visual::TropicalOrientedMatroid;
use Polymake::Struct (
   [ '@ISA' => 'Container' ],
   [ '$TropicalOrientedMatroid' => '#%', default => 'undef' ]
);




object TropicalOrientedMatroid {

# @category Visualization
# Visualizes all pseudohyperplanes inside the mixed subdivision.
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_ALL : VERTICES, DIM, N_PHP{
	my ($self)=@_;
	
	compose($self->VISUAL_MIXED_SUBDIVISION(EdgeColor=>'grey', FacetStyle=>'hidden'), $self->VISUAL_DUAL_PHPS());
}
precondition : DIM {$this->DIM<=3, $this->DIM>=2}



# @category Visualization
# Visualizes the //i//-th dual pseudohyperplane.
# @param Int i
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_DUAL_PHP($; %Visual::Polygons::decorations) : VERTICES, DIM, GENERAL_POSITION {
	my ($self, $php, $decor)=@_;

	my $d=$self->DIM;
	my $vertices=$self->PSEUDOHYPERPLANE($php);
	
	if ($d >= 4) {
		die "don't know how to visulize $d-dimensional polytopal complex";
	}

	my @cells_visual=();

	
	if ($self->GENERAL_POSITION) {
		
		if ($d == 2) {
			foreach (@{$vertices}) {
				foreach (dual_of_fine_cell($_,$php,$d)) {
					my $tmp=ortho_project_2d($_);
					push(@cells_visual,(my $pv=$tmp->VISUAL( VertexStyle=>'hidden', $decor )));
				}
			}
		}
		
		if ($d == 3) {
			foreach (@{$vertices}) {
				foreach (dual_of_fine_cell($_,$php,$d)) {
					my $temp=ortho_project($_);
					push(@cells_visual,(my $pv=$temp->VISUAL( VertexStyle=>'hidden', $decor )));
				}
			}
		}
		
	} else {
		
		if ($d == 2) {
			foreach (@{$vertices}) {
				foreach (dual_of_cell($self, $_,$php)) {
					my $tmp=ortho_project_2d($_);
					push(@cells_visual,(my $pv=$tmp->VISUAL( VertexStyle=>'hidden', $decor )));
				}
			}
		}
		
		if ($d == 3) {
			foreach (@{$vertices}) {
				my @duals=dual_of_cell($self, $_,$php);
				foreach(@duals){
					my $temp=ortho_project($_);
					my $tmpvs=$temp->VERTICES;
					push(@cells_visual,(my $pv=$temp->VISUAL( VertexStyle=>'hidden', $decor )));
				}
			}
		}
	}
	
   visualize(new Visual::TropicalOrientedMatroid( Name => "Dual",
				TropicalOrientedMatroid => $self,
				@cells_visual));

}
precondition : DIM { $this->DIM<=3, $this->DIM>=2 }
#}

# @category Visualization
# Visualises the given dual pseudohyperplanes in different colours.
# @param Set<Int> phps default: draw all pseudohyperplanes
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_DUAL_PHPS : VERTICES, DIM, N_PHP{
	my ($self, $hps) = @_;
	my @h;
	unless (defined $hps) {
		@h=();
		for (my $i=1; $i<=$self->N_PHP; ++$i){
			push(@h,$i);
		}
	} else {
		@h = @{$hps};
	}

	my $angle=360/(@h);
	my $count=0;
	
	my $d=$self->DIM;

	if ($d >= 4) {
		die "don't know how to visulize $d-dimensional polytopal complex";
	}

	my @cells_visual=();

	foreach (@h) {
		my $php=$_;
#		my $vertices=$self->PSEUDOHYPERPLANE($php);

		my $h=@h;
		my $hue=$angle*$count;

		if ($d == 2) {
			push(@cells_visual, my $v_php=$self->VISUAL_DUAL_PHP($php, VertexStyle=>'hidden', EdgeColor=>get_color($count, $h)));
		}
		
		if ($d == 3) {
			push(@cells_visual, my $v_php=$self->VISUAL_DUAL_PHP($php, VertexStyle=>'hidden', FacetColor=>get_color($count, $h)));
		}
		++$count;
	}

   visualize(new Visual::TropicalOrientedMatroid( Name => "Dual",
					TropicalOrientedMatroid => $self,
					@cells_visual));
}
precondition : DIM {$this->DIM<=3, $this->DIM>=2}


# @category Visualization
# Visualizes the mixed subdivision of n&Delta;<sup>d-1</sup> (d=[[DIM]] and n=[[N_PHP]])
# corresponding to the tropical oriented matroid.
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_MIXED_SUBDIVISION(%Visual::Polygons::decorations) : VERTICES, DIM {
	my ($self, $decor)=@_;
	my $d=$self->DIM;
	my $vertices = $self->VERTICES;


    if ($d >= 4) {
		die "don't know how to visualize the mixed subdivision of a $d-simplex\n";
    }
 	
	my @cells_visual = ( );
 	
   	if ($d <= 2) {
		foreach (@{$vertices}) {
    		my $mink = ortho_project_2d(minkowski_cell($_, 3));	
    		$mink->name=toString($_);
	     	push (@cells_visual, (my $pv = $mink->VISUAL( VertexStyle=>'hidden', $decor )));
		}
	}
	elsif ($d == 3) {
		foreach (@{$vertices}) {
			my $s = minkowski_cell($_, 4);
    		my $mink = ortho_project($s);		
    		$mink->name=toString($_);
	     	push (@cells_visual, (my $pv = $mink->VISUAL( VertexStyle=>'hidden', $decor )));
		}
	}

   visualize(new Visual::TropicalOrientedMatroid( Name => "Mixed subdivision",
					TropicalOrientedMatroid => $self,
					@cells_visual));
}
precondition : DIM { $this->DIM<=3 }

# convert a type to a string
sub toString {
	my $v=shift;
	my $r="( ";
	
	foreach (@$v) {
		$r=$r.$_." ";
	}
	$r=$r.")";
	
	return $r;
}


# @category Visualization
# Visualizes the subcomplex of the mixed subdivision 
# of n&Delta;<sup>d-1</sup> (d=[[DIM]] and n=[[N_PHP]])
# corresponding to the given tropical pseudohyperplanes.
# @param Set<Int> phps default: draw all pseudohyperplanes
# @return Visual::TropicalOrientedMatroid
user_method VISUAL_PSEUDO_HYPERPLANES: VERTICES, DIM {
	my ($self, $hps)=@_;
	my @h;
	unless (defined $hps) {
		@h=();
		for (my $i=1; $i<=$self->N_PHP; ++$i){
			push(@h,$i);
		}
	} else {
		@h = @{$hps};
	}
	my $d=$self->DIM;
	
	my $col;	# colour difference value
	 if (@h==1) {$col=1;} else {$col=1/(@h-1);}	
	my $count=0;	# hp counter

    if ($d >= 4) {
		die "don't know how to visualize the mixed subdivision of a $d-simplex\n";
    }

	my @cells_visual = ( );
	my $count=0;
	my $h=@h;
	foreach (@h) {
		my $vertices = $self->PSEUDOHYPERPLANE($_);
 	
	   	if ($d <= 2) {
			foreach (@{$vertices}) {
    			my $mink = shift_php(minkowski_cell($_, 3), $count+1);
    			
    			my $colour=$count*$col;
	     		push (@cells_visual, (my $pv = $mink->VISUAL( VertexStyle=>'hidden', EdgeColor=>'red', FacetColor=>new RGB($colour,$colour,$colour) )));
			}
		}
		elsif ($d == 3) {
			foreach (@{$vertices}) {
				my $s = minkowski_cell($_, 4);
				#print "Dim: $s->DIM\n";
    			my $mink = ortho_project($s);		
	    	 	push (@cells_visual, (my $pv = $mink->VISUAL( 
	    	 	FacetColor=>get_color($count,$h), VertexStyle=>'hidden' )));
			}
		}
		$count++;
	}

   visualize(new Visual::TropicalOrientedMatroid( Name => "Pseudohyperplanes",
					TropicalOrientedMatroid => $self,
					@cells_visual));
}
precondition : DIM { $this->DIM<=3 }

# @category Visualization
# Visualizes the intersection of the given pseudohyperplanes.
# @param Set<int> phps
# @return Visual::TropicalOrientedMatroid
#user_method VISUAL_INTERSECTION : VERTICES, DIM {
#	my ($self, $hps)=@_;
#	my @h;
#	if ($hps=='All') {
#		@h=();
#		for (my $i=1; $i<=$self->N_PHP; ++$i){
#			push(@h,$i);
#		}
#	} else {
#		@h = @{$hps};
#	}
#	my $d=$self->DIM;
#
#	my @v=@{$self->VERTICES};
#	my @r=();	# will contain types in the intersection
#	
#	VERTICES: foreach (@v) {		# go thru VERTICES
#		my @s=@{$_};
#		foreach (@h){				# go thru hyperplanes
#			unless (@{$s[$h-1]} >= 2) {
#				next VERTICES;
#			}
#		}
#		push(@r,\@s);	# if we get here, every tested position has at least 2 elts
#	}
#
#	my $zero=new Vector<Float>($d);
#	my $origin=new polytope::Polytope<Float>(VERTICES => [(1|$zero)]);
#
#	# now go thru cells in intersection
#	foreach my $curr (@r) {
#	
#		my $m=$origin;
#		
#		foreach (@h) {
#			my $entry=$curr->[$_];
#			for (my $i=0; $i<@$entry-1; ++$i) {
#				for (my $j=$i+1; $j<@$entry; ++$j) {
#					my @entry=@$entry;
#					my $p=get_base_cell($entry[$i],$entry[$j],$entry,$d);
#				}
#			}
#		}
#	}
#
#}




###########################
# helper functions
###########################

# projects a 3-dim standard simplex in R4 to R3.
sub ortho_project {
	my ($poly) = @_;
	my @vs = @{$poly->VERTICES};
	my @nvs = ();
	foreach (@vs) {
		my @v=@{$_};
		
		my @nv = ();
		$nv[0]=1;
		for (my $i=1; $i<4; ++$i) {
			$nv[$i] = $v[$i] - 1/3*$v[4];
		}
		push(@nvs,\@nv);
	}
	
	my $r = new polytope::Polytope<Float>(VERTICES=>\@nvs);
	return $r;
}

# projects a 2-dim standard simplex in R3 to R2.
sub ortho_project_2d {
	my ($poly) = @_;
	my @vs = @{$poly->VERTICES};
	my @nvs = ();
	foreach (@vs) {
		my @v=@{$_};
		
		my @nv = ();
		$nv[0]=1;
		for (my $i=1; $i<3; ++$i) {
			$nv[$i] = $v[$i] + (1-sqrt(3))/2*$v[3];
		}
		push(@nvs,\@nv);
	}
	
	my $r = new polytope::Polytope<Float>(VERTICES=>\@nvs);
	return $r;
}


# shifts pseudohyperplanes so that one can see them
sub shift_php {
	my ($poly, $number)=@_;
	my @vs = @{$poly->VERTICES};
	my @nvs = ();	# new vertices
	foreach (@vs) {
		my @v=@{$_};
		
		my @nv = ();	# new vertex
		$nv[0]=1;
		for (my $i=1; $i<4; ++$i) {
			$nv[$i] = $v[$i]+$number*.1;
		}
		push(@nvs,\@nv);
	}
	
	my $r = new polytope::Polytope<Float>(VERTICES=>\@nvs);
#	my $r = new polytope::Polytope<Float>(VERTICES=>\@vs);

	return $r;
	

}


sub get_color_hsv {
	my ($ind, $total) = @_;
	return new HSV(360/$total*$ind,1,1);
}
sub get_color {	# tud
	my ($ind, $total) = @_;
	my $i;
	if ($total>=12) {
		$i=($ind+1)% 12;
	}
	else {
		$i=int(12/$total)*$ind+1;
	}
	return 'tud'.$i.'b';
}



}	# end TropicalOrientedMatroid



# Local Variables:
# mode: perl
# c-basic-offset:3
# End:
