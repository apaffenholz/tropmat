# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/tropmat
# 
# This file is part of the polymake extension tropmat.
# 
# tropmat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# tropmat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tropmat.  If not, see <http://www.gnu.org/licenses/>.



object TropicalOrientedMatroid {



###########################
# dual helper functions
###########################



# visualise dual phps in general, i.e., even in non-general position
sub visual_dual_php_non_gen_pos {
	print "non_gen\n";
	my ($self, $php)=@_;
	
	my $d=$self->DIM;
	my $vertices=$self->PSEUDOHYPERPLANE($php);
	
	if ($d >= 4) {
		die "don't know how to visulize $d-dimensional polytopal complex";
	}

	my @cells_visual=();

    if ($d == 2) {
    	foreach (@{$vertices}) {
    		foreach (dual_of_cell($self, $_,$php)) {
    			push(@cells_visual,(my $pv=$_->VISUAL( VertexStyle=>'hidden' )));
    		}
    	}
    }
    
    if ($d == 3) {
    	foreach (@{$vertices}) {
    		foreach (dual_of_cell($self, $_,$php)) {
    			my $temp=ortho_project($_);
    			push(@cells_visual,(my $pv=$temp->VISUAL( VertexStyle=>'hidden' )));
    		}
    	}
    }
    
   visualize(new Visual::TropicalOrientedMatroid( Name => "Dual",
					TropicalOrientedMatroid => $self,
					@cells_visual));
	

}


sub dual_of_cell {
	my ($tom, $v, $php) = @_;
#	print "vertex: "; foreach(@$v){print "{@$_} "}; print "\n";

	# v is the current vertex, php the index of the php under consideration
	my $d=$tom->RANK;
	my $entry = new Array<Int>($v->[$php-1]);
	# entry is the entry of the current hyperplane

	my @dual_cells=();	# will contain dual cells

	my $s = all_subtypes($v);


	# now go thru all "edges", i.e., subsets of entry of cardinality 2
	for (my $i=0; $i<@$entry-1; ++$i) {
		for (my $j=$i+1; $j<@$entry; ++$j) {

			my @vertices=();	# will contain vertices of the dual cell corresponding to the edge defined by i and j
			
			my $edge=new Set<Int>($entry->[$i],$entry->[$j]);
#			print "edge: $edge\n";
			foreach my $c (@$s) {
				#print "edge: $edge  entry: $c->[$php-1]\n";
				if (incl($edge, $c->[$php-1])<=0) {	# if i,j are contained in current entry ...
#				print "type: "; foreach(@$c){print "{@$_} "}; print "\n";
					my $cell = minkowski_cell($c, $d);
					push(@vertices, $cell->VERTEX_BARYCENTER);
				}
			}
#			print "vertices:\n"; foreach (@vertices){print "$_\n";} print "\n";
			my $m=new polytope::Polytope<Float>(POINTS=>\@vertices);
			push(@dual_cells, $m);							
		}
	}
	return @dual_cells;
}


# returns the list of cells constituting the dual of a php in a given full-dimensional cell of a mixsd
sub dual_of_fine_cell {
#	print "dual_of_cell\n";
	my ($v, $php, $d) = @_;
	# v is the current vertex, php the index of the php under consideration and d the dimension
	my $entry = $v->[$php-1];
	# entry is the entry of the current hyperplane

	my @dual_cells=();	# will contain dual cells

	for (my $i=0; $i<@$entry-1; ++$i) {
		for (my $j=$i+1; $j<@$entry; ++$j) {
			my @entry=@$entry;
			my $p=get_base_cell($entry[$i],$entry[$j],$entry,$d);
			
			my $m=$p;
			for (my $k=0; $k<@$v; ++$k) {
				unless ($k+1 == $php) {
					my @vs = @{$v->[$k]};
					my $tmp = simplex_face($d+1,@vs);
					$m = minksum($m, $tmp);
				}
			}
			push(@dual_cells, $m);
		}
	}
	return @dual_cells;
}

# the dual of a simplex cell
sub get_base_cell {
	# any cell in the dual of a simplex is defined by two edges
	my ($i,$j,$entry,$d)=@_;
	# i and j define the edge, entry is the current entry, d the dimension of the tom
	my @set=sort($i,$j);
	my $rest=$entry-new Set(\@set);
	my $all_ss=all_subsets($rest,\@set);
	my @vertices=();
	
	foreach (@$all_ss) {
		push(@vertices,center_of_cell($d,$_));
	}
	my $p=new polytope::Polytope<Float>(VERTICES=>\@vertices);
	return $p;
}

# all subsets of a given set containing a given subset
sub all_subsets {
	my ($set, $ss) = @_;

	my @ret = ();
	push @ret, $ss;

	if (@$set == 0) {return \@ret;}
	
	my $all = enumerate_subsets($set);
	foreach my $c (@$all) {
		my $n = $c+ new Set($ss);
		push @ret, $n;
	}
	return \@ret;
}

# the center of a given simplex face
# cell is a list of the vertices of the cell
sub center_of_cell {
	my ($d, $cell) = @_;
	my $sf=simplex_face($d+1, @$cell);
	my $vb= $sf->VERTEX_BARYCENTER;
	return $vb;
}



} # end TropicalOrientedMatroid