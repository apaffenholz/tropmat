object TropicalOrientedMatroid {

# @category Axioms
# The __elimination__ of two types //A// and //B// with respect to a position //j// is a type C such that C<sub>j</sub>=A<sub>j</sub>&cup;B<sub>j</sub> and C<sub>i</sub>&isin;{A<sub>i</sub>, B<sub>i</sub>, A<sub>i</sub>&cup;B<sub>i</sub>} for each i&isin;[d] (where d=[[RANK]]).
# This method tries to compute the elimination by brute force search.
# @param Array<Set<Int>> A
# @param Array<Set<Int>> B
# @param Int j
# @return Array<Set<Int>> or 0 if elimination does not exist
user_method ELIMINATION : TYPES, N_PHP {
	my ($self, $A, $B, $j) = @_;
	
	my $e = elimination($A, $B, $j, $self->TYPES);
	
	if (@{$e} == 0) {return 0;}
	
	return $e;
}
weight 1.0;




# @category Axioms
# Returns true if the given type //type// is contained in the tropical oriented matroid. Only works for toms in [[GENERAL_POSITION]]
# @param Array<Set<Int>> type
# @return Bool
user_method CONTAINS : VERTICES, N_PHP {
	my ($self, $type) = @_;
		
	my @vs = @{$self->VERTICES};
	my @t = @{$type};
	my $t = @t;
	
	LOOP: for (my $i=0; $i<@vs; ++$i) {		# go thru all vertices
		my @v=@{$vs[$i]};
	
		if (@v!=$t) {
			die "input type does not have correct length";
		}
		
		for (my $j=0; $j<@t; ++$j) {	#go thru sets in input type
			if (!contains($v[$j],$t[$j])) {
				next LOOP;
			}
		}
		return 1;
	}
	return 0;
}
precondition : GENERAL_POSITION;
weight 2.00;

# @category Axioms
# Returns the __refinement__ of a given type //type// with respect to an ordered partition //ord_part// of [d],
# where d=[[RANK]].
# @param Array<Set<Int>> type
# @param Array<Set<Int>> ord_part an ordered partition of [d]
# @return Array<Set<Int>>
# 
user_method REFINEMENT {
	my ($self, $type, $ordp) = @_;
	return refinement($type, $ordp, $self->RANK);
	
	my @t = @{$type};
	my @o = @{$ordp};
	
	my @r=();
	
	TYPE: foreach (@t) {			# go thru input type
		my $a=new Set<Int>($_);
		foreach (@o) {		# go thru sets in ordered partition
			my $b=new Set<Int>($_);
			my @i= @{$a*$b};#@{intersect($a,$_)};
			if (@i) {
				push(@r,\@i);
				next TYPE;
			}
		}
		push(@r,$a);	# take care of the case where we do only have a partial ordered partition (i.e., last set is omitted)
	}
	return new Array<Set<Int>>(@r);
}

sub refine_one_entry {
	my ($entry, $ordp) = @_;	# entry is a Set<Int>, ordp is an ordered partition
	my $a=new Set<Int>($entry);
	
	foreach (@$ordp) {
		my $b=new Set<Int>($_);
		my @i= @{$a*$b};
		if (@i) {
			return new Set<Int>(@i);
		}
	}	
	return $a;
}
sub refine_whole_type {
	my ($type, $ordp) =@_;
	my @r=();
	
	foreach (@$type) {
		push @r, refine_one_entry($_, $ordp);
	}
	return @r;
}

}