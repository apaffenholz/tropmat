# Copyright (c) 2013-2014 Silke Horn
# http://solros.de/polymake/tropmat
# 
# This file is part of the polymake extension tropmat.
# 
# tropmat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# tropmat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with tropmat.  If not, see <http://www.gnu.org/licenses/>.



# @topic category objects/TropicalOrientedMatroid/methods/Output
# output methods for tropical oriented matroids

# @topic category objects/TropicalOrientedMatroid/methods/Basic properties
# methods for basic properties of tropical oriented matroids

# @topic category objects/TropicalOrientedMatroid/methods/Pseudohyperplanes
# methods producing pseudohyperplanes


# @topic category objects/TropicalOrientedMatroid/methods/Type manipulation
# methods for type manipulation

object TropicalOrientedMatroid {

# @category Output
# pretty printing of types
user_method print_types :  N_PHP, TYPES {	# for some reason this only works if we have N_PHP here (although we certainly don't need it)	
	my $self=shift;
	pretty_print($self->TYPES);
}

# @category Output
# pretty printing of vertices
user_method print_vertices :  N_PHP, TYPES {	# for some reason this only works if we have N_PHP here (although we certainly don't need it)	
	my $self=shift;
	pretty_print($self->VERTICES);
}

# @category Output
# pretty printing of topes
user_method print_topes :  N_PHP, TYPES {	# for some reason this only works if we have N_PHP here (although we certainly don't need it)	
	my $self=shift;
	pretty_print($self->TOPES);
}

sub pretty_print {
	my $t=shift;
	foreach my $cur (@$t) {
		foreach my $s (@$cur) {
			print "$s ";
		}
		print "\n";
	}	
}


# @category Basic properties
# The __rank__ of a given type //type// is the number of connected components of the [[TYPE_GRAPH|type's graph]].
# @param Array<Set<Int>> type
# @return Int
user_method TYPE_RANK :  RANK, N_PHP {	# for some reason this only works if we have N_PHP here (although we certainly don't need it)
	
	my ($self, $j) = @_;
	return rank($j, $self->RANK);
}

# @category Basic properties
# The //i//-the [[APICES|apex]], i.e., the (unique) type whose //i//-th coordinate is [d] (for d=[[RANK]]).
# @param Int i
# @return Array<Set<Int>>
user_method APEX : VERTICES, RANK {
	my ($self, $j) =@_;
	
	my $v=$self->VERTICES;
	foreach my $vertex (@$v) {
		if (@{$vertex->[$j-1]}==$self->RANK) {
			return $vertex;
		}
	}
}


# @category Basic properties
# Returns the type graph of a given type as defined by Ardila and Develin.
# The vertices correspond to the elements in [d];
# two nodes are connected by an edge whenever there is an entry
# in //type// containing them both.
# @param Array<Set<Int>> type
# @return graph::Graph<Undirected>
user_method TYPE_GRAPH : RANK, N_PHP{

	my ($self, $type) = @_;
	my @t=@$type;
	my $d = $self->RANK;
	
	my $r=new props::Graph($d);

	foreach (@t) {
		my @s=@$_;
		for (my $i=0; $i<@s; ++$i) {	# go thru one set
			for (my $j=$i+1; $j<@s; ++$j) {
				my $x=$s[$i];
				my $y=$s[$j];
				$r->edge($x-1,$y-1);
			}
		}
	}
	return new graph::Graph(ADJACENCY=>$r);
}


# @category Pseudohyperplanes
# Returns the set of vertices of the //j//-th pseudohyperplane.
# @param Int j
# @return Array<Set<Int>>
user_method PSEUDOHYPERPLANE : VERTICES, N_PHP {
	my ($self, $j) = @_;
	my @r=();
	
	my @v=@{$self->VERTICES};
	
	foreach (@v) {		# go thru VERTICES
		my @s=@{$_};
		if (@{$s[$j-1]} >= 2) {
			push(@r,\@s);
		}
	}
	return \@r;
}


# @category Type manipulation
# Takes a type //A// and subtracts a set //indices// from every position. Return the result of this operation, or 0 if the result is not a type, i.e., if there is an empty position.
# @param Array<Set<Int>> A
# @param Set<Int> indices
# @return Array<Set<Int>> or 0 if not a type
user_method typeminus {
	shift;
	my ($type, $indices) = @_;
	my @t = @{$type};
	my @i = @$indices;
	my @r=();
	foreach (@t) {
		my @nv = ();
		if (contains(\@i, $_)) {
			return 0;
		} else {
			foreach (@{$_}) {
				my @tmp = ($_);
				unless(contains(\@i, \@tmp)) {
					push(@nv, $_);
				}
			}
		}
		push(@r, \@nv);
	}
	return \@r;
}


# Checks whether $set contains $subset as a subset -- uses common function incl.
sub contains {						
	my ($set, $subset) = @_;
	return (incl(new Set($subset),new Set($set))<=0);
}	


}  # end TropicalOrientedMatroid

